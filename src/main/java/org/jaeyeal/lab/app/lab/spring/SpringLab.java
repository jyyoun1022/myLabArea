package org.jaeyeal.lab.app.lab.spring;

public class SpringLab {
    /** 스프링
     * 자바 언어 기반의 프레임워크
     * 좋은 객체 지향 프로그래밍을 잘할 수 있도록 도와주는 프레임워크
     */

    /** 좋은 객체 지향 프로그래밍
     *  다형성
     *   클라이언트(요청하는 사람)를 변경하지 않고 서버(응답하는 사람)의 구현 기능을 유연하게 변경
     *   클라이언트 = 사람, 서버 = 자동차
     *
     *   스프링은 다형성을 극대화해서 이용할 수 있게 도와준다.
     */

    /** IOC, DI, 컨테이너
     *
     *  제어의 역전 IOC(Inversion of Control)
     *      기존 프로그램은 클라이언트 구현 객체가 스스로 필요한 서버 구현 객체를 생성하고 연결하고 실행했다.
     *      한 마디로 구현 객체가 프로그램의 제어 흐름을 스스로 조종했다.
     *      하지만 AppConfig가 생성과 연결의 역할을 담당해주면서 프로그램의 제어 흐름은 AppConfig가 가져간다.
     *      예를 들면, 구현 객체는 다른 필요한 인터페이스를 호출하지만 어떤 구현 객체가 들어올지 모르고 그냥 로직만 실행하게 되는 것이다.
     *      이렇게 프로그램의 제어 흐름을 외부에서 관리하는 것이 제어의 역전이다.
     */

    /** 프레임워크 vs 라이브러리
     *
     *  프레임워크 : 내가 작성한 코드를 제어하고, 대신 실행
     *      ex) @Test에서 로직만 개발해두면 실행과 제어권은 Junit이라는 프레임워크가 자신의 라이프 사이클 코드 속에서 내가 만든 로직이 콜백 식으로 불러진다.
     *  라이브러리 : 내가 작성한 코드가 직접 제어의 흐름을 담당
     *      ex) 자바 객체를 json으로 바꾸려면 필요한 것을 내가 직접 호출해서 사용
     *
     */

    /**  의존관계 주입 DI(Dependency Injection)
     *
     * 의존관계는 정적인 클래스의 의존관계와 실행 시점에서 결정되는 동적인 객체(인스턴스)의 의존 관계로 분리해서 생각
     *
     *  정적인 클래스 의존관계 : OrderServiceImpl 이 MemberRepository , DiscountPolicy에 의존한다는 것은 알 수 있지만,
     *  인터페이스에 실제로 어떤 구현 객체가 들어오는지 알 수 없다.
     *
     *  동적인 객체 인스턴스 의존관계 : 애플리케이션 실행 시점에 실제 생성된 객체 인스턴스의 참도가 의존 관계를 말함.
     *  인터페이스에서 실제로 어떤 구현 객체가 들어오는지 알 수 있는 의존관계
     *  애플리케이션 실행 시점에 외부에서 실제 구현 객체를 생성하고, 클라이언트에 전달해서 클라이언트와 서버의 실제 의존관계가 연결되는 것을
     *  의존관계 주입이라고 한다.
     */

    /** DI 컨테이너
     *
     *  객체를 생성하고 관리하면서, 의존관계를 연결해주는 것을 IoC 컨테이너 또는 DI 컨테이너라고 한다.
     *  하지만 IoC라는 단어는 범위가 없다. Junit 같은 경우도 제어권이 넘어가는 IoC이므로 범위를 좁혀 DI 컨테이너라고 부른다.
     */

    // 즉, 기능을 확장할 가능성이 없다면 구현체 클래스를 직접 사용하고, 가능성이 있다면 인터페이스를 부여한다.


}
